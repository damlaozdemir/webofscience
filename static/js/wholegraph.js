// Generated by CoffeeScript 1.4.0
(function() {
  var R, d3cola, enter_nodes, graph, height, l, links, n, nodes, svg, width, _i, _j, _len, _len1, _ref, _ref1;
var numberofpublications = []
    var nameofauthors = []
        
  $('td#publications').each(function(){
        numberofpublications.push($(this).text())
    })
  
  /////////////////
  $('#author >').each(function(){
        nameofauthors.push($(this).text())
    })
  
    var keyword = $('b#keyword').text()
    var data = {}
    var node_list = []
    var edge_list = []
    var center_node = { id: String(keyword) }
    node_list.push(center_node)
    var l = 0
    if(nameofauthors.length>30){
        l = 30
    }
    else{
        l = nameofauthors.length
    }
    
    for(var i = 0; i < l; i++){ //number of authors in the graph
        var nodes = {}
        var links = {}

        nodes['id'] = String(nameofauthors[i])
        
        links['id'] = String(numberofpublications[i])
        links['target'] = String(keyword)
        links['source'] = String(nameofauthors[i])
        

        node_list.push(nodes)
        edge_list.push(links)
        emptyarray = []
    
     
       
        for (var key in myhash) {
            var array = JSON.parse(myhash[key] );
            
            if(key ==nodes['id'])
            {
                for(var j =0; j<2; j++){//number of keywords per author
                    var nodes = {}
                    var links = {}

                    nodes['id'] = array[j]
                    
                    
                    

                    
                    links['id'] = array[j] + "to"+ String(nameofauthors[i])
                    
                    links['target'] = array[j]
                    links['source'] = String(nameofauthors[i])
                    
                    node_list.push(nodes)
                    edge_list.push(links)
                }
            }
            
        }
    
     
       
        
    }
    
    data['nodes'] = node_list
    data['links'] = edge_list
    graph = data
  

  /* objectify the graph
  */


  /* resolve node IDs (not optimized at all!)
  */


  _ref = graph.links;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    l = _ref[_i];
    _ref1 = graph.nodes;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      n = _ref1[_j];
      if (l.source === n.id) {
        l.source = n;
      }
      if (l.target === n.id) {
        l.target = n;
      }
    }
  }

  R = 18;

  svg = d3.select('svg');

  width = svg.node().getBoundingClientRect().width;

  height = svg.node().getBoundingClientRect().height;

  /* create nodes and links
  */


  links = svg.selectAll('.link').data(graph.links, function(d) {
    return d.id;
  });

  links.enter().append('line').attr('class', 'link');

  nodes = svg.selectAll('.node').data(graph.nodes, function(d) {
    return d.id;
  });

  enter_nodes = nodes.enter().append('g').attr('class', 'node');

  enter_nodes.append('circle').attr('r', R);

  /* draw the label
  */


  enter_nodes.append('text').text(function(d) {
    return d.id;
  }).attr('dy', '0.35em');

  /* cola layout
  */


  graph.nodes.forEach(function(v) {
    v.width = 2.5 * R;
    return v.height = 2.5 * R;
  });

  d3cola = cola.d3adaptor().size([width, height]).linkDistance(80).avoidOverlaps(true).nodes(graph.nodes).links(graph.links).on('tick', function() {
    /* update nodes and links
    */
    nodes.attr('transform', function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
    return links.attr('x1', function(d) {
      return d.source.x;
    }).attr('y1', function(d) {
      return d.source.y;
    }).attr('x2', function(d) {
      return d.target.x;
    }).attr('y2', function(d) {
      return d.target.y;
    });
  });
  
  enter_nodes.call(d3cola.drag);

  d3cola.start(30, 30, 30);

}).call(this);