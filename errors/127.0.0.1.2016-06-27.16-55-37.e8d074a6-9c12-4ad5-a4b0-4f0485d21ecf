(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'keywords'"
p3
sS'layer'
p4
S'/home/damla/web2py/applications/webofsciencenew/views/default/author.html'
p5
sS'code'
p6
S'response.write(\'<!DOCTYPE html>\\n<html lang="en">\\n\\t<head>\\n\\t\\t<meta http-equiv="content-type" content="text/html; charset=UTF-8">\\n\\t\\t<meta charset="utf-8">\\n\\t\\t<title>Web Of Science</title>\\n\\t\\t<meta name="generator" content="Bootply" />\\n\\t\\t<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>\\n\\t\\t<link rel="stylesheet" href="\', escape=False)\nresponse.write(URL(\'static\',\'/css/bootstrap.min.css\'))\nresponse.write(\'" />\\n\\t\\t<!--[if lt IE 9]>\\n\\t\\t\\t<script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>\\n\\t\\t<![endif]-->\\n\\t\\t<link rel="stylesheet" href="\', escape=False)\nresponse.write(URL(\'static\',\'/css/styles.css\'))\nresponse.write(\'"  />\\n\\n\\t\\t<!--graph content-->\\n\\n\\n\\t\\t<script type="text/javascript">\\n            window.onload = function() {\\n                // id of Cytoscape Web container div\\n                var div_id = "cytoscapeweb";\\n\\n                // NOTE: - the attributes on nodes and edges\\n                //       - it also has directed edges, which will automatically display edge arrows\\n                var xml = \\\'\\\\\\n                <graphml>\\\\\\n                  <key id="label" for="all" attr.name="label" attr.type="string"/>\\\\\\n                  <key id="weight" for="node" attr.name="weight" attr.type="double"/>\\\\\\n                  <graph edgedefault="directed">\\\\\\n                    <node id="1">\\\\\\n                        <data key="label">A</data>\\\\\\n                        <data key="weight">2.0</data>\\\\\\n                    </node>\\\\\\n                    <node id="2">\\\\\\n                        <data key="label">B</data>\\\\\\n                        <data key="weight">1.5</data>\\\\\\n                    </node>\\\\\\n                    <node id="3">\\\\\\n                        <data key="label">C</data>\\\\\\n                        <data key="weight">1.0</data>\\\\\\n                    </node>\\\\\\n                    <edge source="1" target="2">\\\\\\n                        <data key="label">A to B</data>\\\\\\n                    </edge>\\\\\\n                    <edge source="1" target="3">\\\\\\n                        <data key="label">A to C</data>\\\\\\n                    </edge>\\\\\\n                  </graph>\\\\\\n                </graphml>\\\\\\n                \\\';\\n\\n                function rand_color() {\\n                    function rand_channel() {\\n                        return Math.round( Math.random() * 255 );\\n                    }\\n\\n                    function hex_string(num) {\\n                        var ret = num.toString(16);\\n\\n                        if (ret.length < 2) {\\n                            return "0" + ret;\\n                        } else {\\n                            return ret;\\n                        }\\n                    }\\n\\n                    var r = rand_channel();\\n                    var g = rand_channel();\\n                    var b = rand_channel();\\n\\n                    return "#" + hex_string(r) + hex_string(g) + hex_string(b);\\n                }\\n\\n                // visual style we will use\\n                var visual_style = {\\n                    global: {\\n                        backgroundColor: "#ABCFD6"\\n                    },\\n                    nodes: {\\n                        shape: "CIRCLE",\\n                        borderWidth: 3,\\n                        borderColor: "#ffffff",\\n                        size: {\\n                            defaultValue: 25,\\n                            continuousMapper: { attrName: "weight", minValue: 25, maxValue: 75 }\\n                        },\\n                        color: {\\n                            discreteMapper: {\\n                                attrName: "id",\\n                                entries: [\\n                                    { attrValue: 1, value: "#0B94B1" },\\n                                    { attrValue: 2, value: "#9A0B0B" },\\n                                    { attrValue: 3, value: "#dddd00" }\\n                                ]\\n                            }\\n                        },\\n                        labelHorizontalAnchor: "center"\\n                    },\\n                    edges: {\\n                        width: 3,\\n                        color: "#0B94B1"\\n                    }\\n                };\\n\\n                // initialization options\\n                var options = {\\n                    swfPath: "\', escape=False)\nresponse.write(URL(\'static\',\'/swf/CytoscapeWeb\'))\nresponse.write(\'",\\n                    flashInstallerPath: "\', escape=False)\nresponse.write(URL(\'static\',\'/swf/playerProductInstall\'))\nresponse.write(\'"\\n                };\\n\\n                var vis = new org.cytoscapeweb.Visualization(div_id, options);\\n\\n                vis.ready(function() {\\n                    // set the style programmatically\\n                    document.getElementById("color").onclick = function(){\\n                        visual_style.global.backgroundColor = rand_color();\\n                        vis.visualStyle(visual_style);\\n                    };\\n                });\\n\\n                var draw_options = {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// your data goes here\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t/*$.ajax({\\n            type: "GET",\\n            url: "data.json",\\n            dataType: "json",\\n                        error: function(){\\n                alert("Error loading file");\\n            },\\nsuccess: function(data){\\n}\\n});\\nvar netwdata = data.elements[0];\\nvis.draw({ network: netwdata });*/\\n\\n                    network: xml,\\n\\n                    // show edge labels too\\n                    edgeLabelsVisible: true,\\n\\n                    // let\\\'s try another layout\\n                    layout: "Tree",\\n\\n                    // set the style at initialisation\\n                    visualStyle: visual_style,\\n\\n                    // hide pan zoom\\n                    panZoomControlVisible: true\\n                };\\n\\n                vis.draw(draw_options);\\n            };\\n        </script>\\n\\n        <style>\\n            * { margin: 0; padding: 0; font-family: Helvetica, Arial, Verdana, sans-serif; }\\n            html, body { height: 100%; width: 100%; padding: 0; margin: 0; background-color: #f0f0f0; }\\n            body { line-height: 1.5; color: #000000; font-size: 14px; }\\n            /* The Cytoscape Web container must have its dimensions set. */\\n            #cytoscapeweb { width: 100%; height: 80%; }\\n            #note { width: 100%; text-align: center; padding-top: 1em; }\\n            .link { text-decoration: underline; color: #0b94b1; cursor: pointer; }\\n        </style>\\n\\t\\t<!--endof graph content-->\\n\\t</head>\\n\\t<body>\\n<!-- begin template -->\\n<div class="navbar navbar-custom navbar-fixed-top">\\n <div class="navbar-header"><a class="navbar-brand" href="#">Brand</a>\\n      <a class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">\\n        <span class="icon-bar"></span>\\n        <span class="icon-bar"></span>\\n        <span class="icon-bar"></span>\\n      </a>\\n    </div>\\n    <div class="navbar-collapse collapse">\\n      <ul class="nav navbar-nav">\\n        <li class="active"><a href="#">Home</a></li>\\n        <li><a href="#">Link</a></li>\\n        <li><a href="#">Link</a></li>\\n        <li>&nbsp;</li>\\n      </ul>\\n      <form class="navbar-form">\\n        <div class="form-group" style="display:inline;">\\n          <div class="input-group">\\n            <div class="input-group-btn">\\n              <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-chevron-down"></span></button>\\n              <ul class="dropdown-menu">\\n                <li><a href="#">Category 1</a></li>\\n                <li><a href="#">Category 2</a></li>\\n                <li><a href="#">Category 3</a></li>\\n                <li><a href="#">Category 4</a></li>\\n                <li><a href="#">Category 5</a></li>\\n              </ul>\\n            </div>\\n            <input type="text" class="form-control" id="textinput"placeholder="Enter a Keyword" name="inputkeyword">\\n            <button class="btn btn-default" type="submit"  method="post"><span class="glyphicon glyphicon-search"></span> </button>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n</div>\\n\\n<div id="map-canvas">\\n\\t<embed src="\', escape=False)\nresponse.write(URL(\'static\',\'/swf/CytoscapeWeb.swf\'))\nresponse.write(\'" width="100%" height="100%" align="middle" id="cytoscapeWeb1" quality="high" bgcolor="#ffffff" name="cytoscapeWeb1" allowscriptaccess="always" pluginspage="http://www.adobe.com/go/getflashplayer" wmode="opaque" flashvars="id=cytoscapeWeb1" type="application/x-shockwave-flash">\\n</div>\\n<div class="container-fluid" id="main">\\n  <div class="row">\\n  \\t<div class="col-xs-8" id="left">\\n      \', escape=False)\nresponse.write(\'\\n\\n<font color="blue">Results for \', escape=False)\nresponse.write(keyword)\nresponse.write(\'  and \', escape=False)\nresponse.write(authorname)\nresponse.write(\':</font> (\', escape=False)\nresponse.write(matches)\nresponse.write(\' matches found!)\\n\\n\\n<div id="page-wrapper">\\n      <div class="row" >\\n            <div class="col-lg-12">\\n                \', escape=False)\nfor article in articles:\n    response.write(\'\\n              <ul class ="desc">\\n                <li>\\n                \', escape=False)\n    response.write(article[\'title\'][0])\n    response.write(\'\\n\\n                </li>\\n              </ul>\\n\\n                  \', escape=False)\n    for author in article[\'authors\']:\n        response.write(\'\\n                      \', escape=False)\n        if author in authorname:\n            response.write(\'\\n                        \', escape=False)\n            index=article[\'authors\'].index(author)\n            response.write(\'\\n                      \', escape=False)\n        else:\n            continue\n        response.write(\'\\n                  \', escape=False)\n        pass\n    response.write(\'\\n                  \', escape=False)\n    for keyword in article[\'keywords\']:\n        response.write(\'\\n                      \', escape=False)\n        response.write(keyword)\n        response.write(\'\\n                    \', escape=False)\n        pass\n    response.write(\'\\n              \', escape=False)\n    pass\nresponse.write(\'\\n            </div>\\n        </div>\\n</div>\\n\', escape=False)\nresponse.write(\'\\n\\t\\t</div>\\n  </div>\\n</div>\\n<!-- end template -->\\n\\n\\t<!-- script references -->\\n\\t\\t<script type="text/javascript" src="\', escape=False)\nresponse.write(URL(\'static\',\'/js/json2.min.js\'))\nresponse.write(\'"></script>\\n\\t\\t<script type="text/javascript" src="\', escape=False)\nresponse.write(URL(\'static\',\'/js/AC_OETags.min.js\'))\nresponse.write(\'"></script>\\n\\t\\t<script type="text/javascript" src="\', escape=False)\nresponse.write(URL(\'static\',\'/js/cytoscapeweb.min.js\'))\nresponse.write(\'"></script>\\n\\t\\t<script src="\', escape=False)\nresponse.write(URL(\'static\',\'/js/jquery.min.js\'))\nresponse.write(\'" type="text/javascript"></script>\\n\\t\\t<script src="\', escape=False)\nresponse.write(URL(\'static\',\'/js/bootstrap.min.js\'))\nresponse.write(\'" type="text/javascript"></script>\\n\\t\\t<!--<script src="http://maps.googleapis.com/maps/api/js?sensor=false&extension=.js&output=embed"></script>-->\\n\\t\\t<script src="\', escape=False)\nresponse.write(URL(\'static\',\'/js/scripts.js\'))\nresponse.write(\'" type="text/javascript"></script>\\n\\t</body>\\n</html>\\n\', escape=False)'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/damla/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/damla/web2py/applications/webofsciencenew/views/default/author.html", line 34, in <module>\nKeyError: \'keywords\'\n'
p11
s.